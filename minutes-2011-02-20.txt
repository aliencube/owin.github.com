OWIN Working Group Call - 20 February 2011 

Attendees:

Ryan Riley, Jason Sirota, Kevin Swiber, Louis DeJardin, Benjamin van der Veen, Demis Bellot

Summary:

A round-table discussion regarding the state of OWIN, opportunity to air concerns with regard to the apparent complexity of OWIN. 

Ryan mentioned that the initial goal when Scott Koon created the group was to get implementors of Sinatra-like frameworks talking to create a common underlying library which would be easy to build new frameworks and middlewares on top of. Feels the discussion perhaps got a bit derailed when we went down the OWIN-is-only-a-spec path and would like to see something more Rack-like. Mentioned that there was complexity from the F# side in converting native F# functions and async blocks to and from Action and Func delegates; Benjamin mentioned that the OWIN delegate signature is represented with Action/Func in the spec, but could be equivalently represented using CLR interfaces, C# async/await, F# functions and async blocks.

Jason was concerned about the growing complexity of the backpressure mechanisms. Felt that the initial imperative mechanisms (Action<Action<ArraySegment<byte>>, Action<Exception>>) where fairly easy to understand but the pull model stuff (IObservable<Cargo<T>>, IObservable<Tuple<T, Action, Action<Exception>>>) started to get a bit heavy. Jason's second concern was if framework devs where going to have to worry about these gnarly delegate signatures. Once the spec is finished, can we converge on a shim or utility library?

Kevin chimed in that this was desireable. What would that deliverable look like? Is it a big Rack-like thing with lots of high-level modules (authentication, routing, GZip, etc) or a collection of simple utilities for working with the delegate structure.

Demis agreed that he'd like to see some kind of base utility library to ease friction when developing frameworks. Also reiterated that he'd like to see it be very performant on both Windows and Linux and that the underlying bits should facilitate an event-loop model like Node.js. Benjamin agreed and reiterated that he's been keeping this model in mind throughout the discussion and the development of Kayak.

Technical problems with Skype were had.

Once everyone was back on the call, we went over the various request/response body delegate signatures and clarified some misunderstandings in their interpretation. 

The delegates referenced where collected by Jason on this post: http://groups.google.com/group/net-http-abstractions/browse_frm/thread/3551a19b7422c3d3

Action< 
   Action<ArraySegment<byte>>,  //next 
   Action<Exception>>           //error 

This delegate is an imperative (pull-model) asynchronous read. Consuming side calls outer action with next and error callbacks, producing side calls either the next or error callbacks exactly once.


Action< 
   Action<ArraySegment<byte>>,   //next 
   Action<Exception>,            //error 
   Action>                       //done 

This one is like the previous, but with an explicit done callback. Benjamin pointed out that this one doesn't quite make sense because since the next or error callbacks are invoked only once, so a done callback is redundant. Benjamin said that it looks a lot like a delegate equivalent of IObservable if it was changed slightly—Jason said that yes, Observable is what he meant. It should have looked like:

Func< 
   Action<ArraySegment<byte>>,   //next 
   Action<Exception>,            //error 
   Action,                       //done 
   Action>                       //cancel

This delegate is equivalent to IObservable<ArraySegment<byte>>. Benjamin noted that a plain IObservable doesn't work because there is no mechanism for the consuming side to tell the producing side to back off. 

Hence Louis' Cargo<T> type and Benjamin's suggestion of IObservable<Tuple<T, Action>>.

Cargo<T> is essentially a pair of [bool, continuation]. If the consuming side wishes the producing side to back off, it sets the boolean flag and later calls the continuation action. The drawback is that is a class on which any OWIN-aware component would be required to take a dependency.

IObservable<Tuple<T, Action> gets around this problem by dispensing with the boolean state and requiring the consuming side to invoke a continuation before the producing side will provide the next value. The values are essentially a pair of [value, continuation]. Written in delegate form:

Func< 
   Action<                       //next 
	ArraySegment<byte>        //value
       Action                    //continuation

   Action<Exception>,            //error
   Action,                       //done 
   Action>                       //cancel


Jason asked if IObservable<Cargo<T>> could be written in the form of an expanded delegate. Benjamin explained that it wasn't possible since Cargo<T> contains an explicit boolean state, which is why he suggested IObservable<Tuple<T, Action>>. 

Benjamin asked Louis' thoughts on that signature. Louis explained his concern that if the consuming side completed its logic synchronously, it would immediately call the continuation action, and the producing side may then immediately call the next action, which then might immediately call the continuation action, and so on—the result being a mutually recursive loop which could eventually result in a stack overflow.

Benjamin suggested that one or both sides could employ a stack guard which would reschedule (or "trampoline") the continuation action to be invoked later, allowing the stack to unwind. Louis agreed that that was possible. Benjamin and Louis began to wonder if this could easily be used on both the request and response sides and suggested that possibly a trampoline delegate of the form Action<Action> might be a necessary addition to the env.

Jason felt this was too complicated to be approachable for and everyone agreed.

Kevin wondered if there were some easy compromises which could be made to cover 80% of use-cases and greatly simplify the interface

The group noted that a large amount of complexity could be done away with if the interface was synchronous like WSGI or Rack, but agreed that an asynchronous interface was the primary goal.

Louis and Benjamin agreed that the easiest way to support async was if the producing side pushes data to the consuming side, like IObservable. Others noted that this is difficult to use on the request side since most existing frameworks are going to expect to have a stream from which they can read imperatively. Benjamin and Louis agreed that there could be an adapter from the push model to a pull/imperative read model for use on the request body.

Conclusion:

It was clear that OWIN should support performant evented IO, and that it should also be adaptable to more familiar abstractions such as Stream, TextWriter, etc, as well as provide an easier-to-use interface for dealing with request, env, and response objects. Benjamin and Louis, being as they are very familiar with the nitty-gritty of async, decided to work together to settle on a delegate structure for the request and response bodies which would allow for good performance and memory use characteristics, and adapt Louis' Taco library to provide a basic wrappers around the delegate structures as well as a buffered, imperative input stream mechanism

Action Items:

- Develop an observable delegate structure for the entity bodies.
- Create minimal C# library for use with OWIN, the goal being to provide a few classes to ease working with the env dict/request representation, and a response. An adapter from an observable data stream (used in the core interface) to an imperative data stream will also be provided.
- Determine appropriate license for said library







